


kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: testlogs-vol
# provisioner: kubernetes.io/no-provisioner
provisioner:  cluster.local/release-name-nfs-client-provisioner
volumeBindingMode: WaitForFirstConsumer

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logs-claim
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: testlogs-vol

---

# apiVersion: v1
# kind: Service
# metadata:
#   name: nginx
#   labels:
#     app: nginx
# spec:
#   ports:
#   - port: 80
#     name: web
#   clusterIP: None
#   selector:
#     app: nginx

# ---

# apiVersion: apps/v1beta1
# kind: StatefulSet
# metadata:
#   name: web
# spec:
#   serviceName: "nginx"
#   replicas: 2
#   template:
#     metadata:
#       labels:
#         app: nginx
#     spec:
#       containers:
#       - name: nginx
#         image: docker.io/nginx:stable
#         ports:
#         - containerPort: 80
#           name: web
#         volumeMounts:
#         - name: www
#           mountPath: /usr/share/nginx/html
#   volumeClaimTemplates:
#   - metadata:
#       name: www
#     spec:
#       accessModes: [ "ReadWriteOnce" ]
#       storageClassName: "testlogs-vol"
#       resources:
#         requests:
#           storage: 1Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-nfs-app
  labels:
    key: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: app-pod
  template:
    metadata:
      labels:
        app.kubernetes.io/name: app-pod
    spec:
      containers:
        - name: app-c
          image: "docker.io/nginx:stable"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
          volumeMounts:
            - name: logsdb
              mountPath: '/usr/local/tomcat/logs'
      volumes:
        - name: logsdb
          persistentVolumeClaim:
            claimName: logs-claim

